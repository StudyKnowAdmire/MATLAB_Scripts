% comp - array of complex humbers, mean subtracted
% PTile - which percentile (number from 1-100)
% Window - window length in seconds
% Overlap - Fractional overlap
% Rate - sampling rate
% Implemented according to the writeup in MV.docx

function [Out1 Out2 Out3] = ApproxMax(comp, Window, Overlap, Rate)

WindowSamples = round(Window*Rate);
OverlapSamples = round(Overlap*WindowSamples);

% convert data into range (in meters)
lambda = 3e8/5.8e9;
Range = UnWrap(angle(comp)/2/pi, -0.5, 0.5)* lambda/2;

clear('comp');
N = length(Range);
i = 1;

if (N < WindowSamples)
    Fit = polyfit(double([1:N]),Range',1);
    Velo(i) = abs(Fit(1));
else

    % calculate for each window with specified overlap
for j = 1:(WindowSamples-OverlapSamples):(N + 1 - WindowSamples)
    startIndex = j; 
    stopIndex = j+WindowSamples-1;
    W = double([startIndex:stopIndex]);
    Fit = polyfit(W,Range(W)',1);
    Velo(i) = abs(Fit(1));
    i = i + 1;
end

end

clear('Range');
Velo = sort(Velo);

% actually, PTile is an input parameter, but we select 90, 70 and 50th
% Ptiles as indicated by Weka
Out1 = 1000*Velo(round(0.9*length(Velo)));
Out2 = 1000*Velo(round(0.7*length(Velo)));
Out3 = 1000*Velo(round(0.5*length(Velo)));
clear('Velo');
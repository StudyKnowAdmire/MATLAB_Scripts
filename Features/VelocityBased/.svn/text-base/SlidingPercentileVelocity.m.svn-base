% comp - array of complex humbers, mean subtracted
% PTile - which percentile (number from 1-100)
% Window - window length in seconds
% Rate - sampling rate

function [Out1 Out2 Out3] = SlidingPercentileVelocity(comp, Window, Overlap, Rate)

% calculate range in meters
lambda = 3e8/5.8e9;
Range = UnWrap(angle(comp)/2/pi, -0.5, 0.5)* lambda/2;

WindowSamples = round(Window*Rate);
OverlapSamples = round(Overlap*WindowSamples);
N = length(Range);

if (N < WindowSamples)
    phaseDiff = max(Range) - min(Range);
else

k = 1;

% find max-min over each window
for j = 1:(WindowSamples-OverlapSamples):(N + 1 - WindowSamples)
    startIndex = j; 
    stopIndex = j+WindowSamples-1;
    phaseDiff(k) = max(Range(startIndex:stopIndex)) - min(Range(startIndex:stopIndex));
    k = k + 1;
end
end

phaseDiff = sort(phaseDiff);

% actually, PTile is an input parameter, but we select 90, 70 and 50th
% Ptiles as indicated by Weka
Out1 = phaseDiff(round(0.9*length(phaseDiff)));
Out2 = phaseDiff(round(0.7*length(phaseDiff)));
Out3 = phaseDiff(round(0.5*length(phaseDiff)));